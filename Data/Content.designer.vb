'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.296
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="WR_SenalesCaribe")>  _
Partial Public Class ContentDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertPhoto(instance As Photo)
    End Sub
  Partial Private Sub UpdatePhoto(instance As Photo)
    End Sub
  Partial Private Sub DeletePhoto(instance As Photo)
    End Sub
  Partial Private Sub InsertContentPhoto(instance As ContentPhoto)
    End Sub
  Partial Private Sub UpdateContentPhoto(instance As ContentPhoto)
    End Sub
  Partial Private Sub DeleteContentPhoto(instance As ContentPhoto)
    End Sub
  Partial Private Sub InsertContent_Category(instance As Content_Category)
    End Sub
  Partial Private Sub UpdateContent_Category(instance As Content_Category)
    End Sub
  Partial Private Sub DeleteContent_Category(instance As Content_Category)
    End Sub
  Partial Private Sub InsertCategory(instance As Category)
    End Sub
  Partial Private Sub UpdateCategory(instance As Category)
    End Sub
  Partial Private Sub DeleteCategory(instance As Category)
    End Sub
  Partial Private Sub InsertContent(instance As Content)
    End Sub
  Partial Private Sub UpdateContent(instance As Content)
    End Sub
  Partial Private Sub DeleteContent(instance As Content)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.DataSenalesCaribe.My.MySettings.Default.WR_SenalesCaribeConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Photos() As System.Data.Linq.Table(Of Photo)
		Get
			Return Me.GetTable(Of Photo)
		End Get
	End Property
	
	Public ReadOnly Property ContentPhotos() As System.Data.Linq.Table(Of ContentPhoto)
		Get
			Return Me.GetTable(Of ContentPhoto)
		End Get
	End Property
	
	Public ReadOnly Property Content_Categories() As System.Data.Linq.Table(Of Content_Category)
		Get
			Return Me.GetTable(Of Content_Category)
		End Get
	End Property
	
	Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
		Get
			Return Me.GetTable(Of Category)
		End Get
	End Property
	
	Public ReadOnly Property Contents() As System.Data.Linq.Table(Of Content)
		Get
			Return Me.GetTable(Of Content)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Photo")>  _
Partial Public Class Photo
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDPhoto As Integer
	
	Private _Description As String
	
	Private _ContentType As String
	
	Private _ContentLength As System.Nullable(Of Integer)
	
	Private _PhotoSmall As System.Data.Linq.Binary
	
	Private _PhotoSmallName As String
	
	Private _PhotoLarge As System.Data.Linq.Binary
	
	Private _PhotoLargeName As String
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Create_User As String
	
	Private _Create_Date As System.Nullable(Of Date)
	
	Private _Update_User As String
	
	Private _Update_Date As System.Nullable(Of Date)
	
	Private _ContentPhotos As EntitySet(Of ContentPhoto)
	
	Private _Categories As EntitySet(Of Category)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDPhotoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPhotoChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnContentTypeChanging(value As String)
    End Sub
    Partial Private Sub OnContentTypeChanged()
    End Sub
    Partial Private Sub OnContentLengthChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnContentLengthChanged()
    End Sub
    Partial Private Sub OnPhotoSmallChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPhotoSmallChanged()
    End Sub
    Partial Private Sub OnPhotoSmallNameChanging(value As String)
    End Sub
    Partial Private Sub OnPhotoSmallNameChanged()
    End Sub
    Partial Private Sub OnPhotoLargeChanging(value As System.Data.Linq.Binary)
    End Sub
    Partial Private Sub OnPhotoLargeChanged()
    End Sub
    Partial Private Sub OnPhotoLargeNameChanging(value As String)
    End Sub
    Partial Private Sub OnPhotoLargeNameChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCreate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnCreate_UserChanged()
    End Sub
    Partial Private Sub OnCreate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreate_DateChanged()
    End Sub
    Partial Private Sub OnUpdate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnUpdate_UserChanged()
    End Sub
    Partial Private Sub OnUpdate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdate_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContentPhotos = New EntitySet(Of ContentPhoto)(AddressOf Me.attach_ContentPhotos, AddressOf Me.detach_ContentPhotos)
		Me._Categories = New EntitySet(Of Category)(AddressOf Me.attach_Categories, AddressOf Me.detach_Categories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPhoto", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDPhoto() As Integer
		Get
			Return Me._IDPhoto
		End Get
		Set
			If ((Me._IDPhoto = value)  _
						= false) Then
				Me.OnIDPhotoChanging(value)
				Me.SendPropertyChanging
				Me._IDPhoto = value
				Me.SendPropertyChanged("IDPhoto")
				Me.OnIDPhotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="VarChar(100)")>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContentType", DbType:="VarChar(30)")>  _
	Public Property ContentType() As String
		Get
			Return Me._ContentType
		End Get
		Set
			If (String.Equals(Me._ContentType, value) = false) Then
				Me.OnContentTypeChanging(value)
				Me.SendPropertyChanging
				Me._ContentType = value
				Me.SendPropertyChanged("ContentType")
				Me.OnContentTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ContentLength", DbType:="Int")>  _
	Public Property ContentLength() As System.Nullable(Of Integer)
		Get
			Return Me._ContentLength
		End Get
		Set
			If (Me._ContentLength.Equals(value) = false) Then
				Me.OnContentLengthChanging(value)
				Me.SendPropertyChanging
				Me._ContentLength = value
				Me.SendPropertyChanged("ContentLength")
				Me.OnContentLengthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoSmall", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PhotoSmall() As System.Data.Linq.Binary
		Get
			Return Me._PhotoSmall
		End Get
		Set
			If (Object.Equals(Me._PhotoSmall, value) = false) Then
				Me.OnPhotoSmallChanging(value)
				Me.SendPropertyChanging
				Me._PhotoSmall = value
				Me.SendPropertyChanged("PhotoSmall")
				Me.OnPhotoSmallChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoSmallName", DbType:="VarChar(255)")>  _
	Public Property PhotoSmallName() As String
		Get
			Return Me._PhotoSmallName
		End Get
		Set
			If (String.Equals(Me._PhotoSmallName, value) = false) Then
				Me.OnPhotoSmallNameChanging(value)
				Me.SendPropertyChanging
				Me._PhotoSmallName = value
				Me.SendPropertyChanged("PhotoSmallName")
				Me.OnPhotoSmallNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoLarge", DbType:="VarBinary(MAX)", UpdateCheck:=UpdateCheck.Never)>  _
	Public Property PhotoLarge() As System.Data.Linq.Binary
		Get
			Return Me._PhotoLarge
		End Get
		Set
			If (Object.Equals(Me._PhotoLarge, value) = false) Then
				Me.OnPhotoLargeChanging(value)
				Me.SendPropertyChanging
				Me._PhotoLarge = value
				Me.SendPropertyChanged("PhotoLarge")
				Me.OnPhotoLargeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhotoLargeName", DbType:="VarChar(255)")>  _
	Public Property PhotoLargeName() As String
		Get
			Return Me._PhotoLargeName
		End Get
		Set
			If (String.Equals(Me._PhotoLargeName, value) = false) Then
				Me.OnPhotoLargeNameChanging(value)
				Me.SendPropertyChanging
				Me._PhotoLargeName = value
				Me.SendPropertyChanged("PhotoLargeName")
				Me.OnPhotoLargeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_User", DbType:="VarChar(50)")>  _
	Public Property Create_User() As String
		Get
			Return Me._Create_User
		End Get
		Set
			If (String.Equals(Me._Create_User, value) = false) Then
				Me.OnCreate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Create_User = value
				Me.SendPropertyChanged("Create_User")
				Me.OnCreate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_Date", DbType:="SmallDateTime")>  _
	Public Property Create_Date() As System.Nullable(Of Date)
		Get
			Return Me._Create_Date
		End Get
		Set
			If (Me._Create_Date.Equals(value) = false) Then
				Me.OnCreate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Create_Date = value
				Me.SendPropertyChanged("Create_Date")
				Me.OnCreate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_User", DbType:="VarChar(50)")>  _
	Public Property Update_User() As String
		Get
			Return Me._Update_User
		End Get
		Set
			If (String.Equals(Me._Update_User, value) = false) Then
				Me.OnUpdate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Update_User = value
				Me.SendPropertyChanged("Update_User")
				Me.OnUpdate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_Date", DbType:="SmallDateTime")>  _
	Public Property Update_Date() As System.Nullable(Of Date)
		Get
			Return Me._Update_Date
		End Get
		Set
			If (Me._Update_Date.Equals(value) = false) Then
				Me.OnUpdate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Update_Date = value
				Me.SendPropertyChanged("Update_Date")
				Me.OnUpdate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Photo_ContentPhoto", Storage:="_ContentPhotos", ThisKey:="IDPhoto", OtherKey:="IDPhoto")>  _
	Public Property ContentPhotos() As EntitySet(Of ContentPhoto)
		Get
			Return Me._ContentPhotos
		End Get
		Set
			Me._ContentPhotos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Photo_Category", Storage:="_Categories", ThisKey:="IDPhoto", OtherKey:="IDPhoto")>  _
	Public Property Categories() As EntitySet(Of Category)
		Get
			Return Me._Categories
		End Get
		Set
			Me._Categories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ContentPhotos(ByVal entity As ContentPhoto)
		Me.SendPropertyChanging
		entity.Photo = Me
	End Sub
	
	Private Sub detach_ContentPhotos(ByVal entity As ContentPhoto)
		Me.SendPropertyChanging
		entity.Photo = Nothing
	End Sub
	
	Private Sub attach_Categories(ByVal entity As Category)
		Me.SendPropertyChanging
		entity.Photo = Me
	End Sub
	
	Private Sub detach_Categories(ByVal entity As Category)
		Me.SendPropertyChanging
		entity.Photo = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ContentPhoto")>  _
Partial Public Class ContentPhoto
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDContent As Integer
	
	Private _IDPhoto As Integer
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Create_User As String
	
	Private _Create_Date As System.Nullable(Of Date)
	
	Private _Update_User As String
	
	Private _Update_Date As System.Nullable(Of Date)
	
	Private _Photo As EntityRef(Of Photo)
	
	Private _Content As EntityRef(Of Content)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDContentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDContentChanged()
    End Sub
    Partial Private Sub OnIDPhotoChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDPhotoChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCreate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnCreate_UserChanged()
    End Sub
    Partial Private Sub OnCreate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreate_DateChanged()
    End Sub
    Partial Private Sub OnUpdate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnUpdate_UserChanged()
    End Sub
    Partial Private Sub OnUpdate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdate_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Photo = CType(Nothing, EntityRef(Of Photo))
		Me._Content = CType(Nothing, EntityRef(Of Content))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDContent", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDContent() As Integer
		Get
			Return Me._IDContent
		End Get
		Set
			If ((Me._IDContent = value)  _
						= false) Then
				If Me._Content.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDContentChanging(value)
				Me.SendPropertyChanging
				Me._IDContent = value
				Me.SendPropertyChanged("IDContent")
				Me.OnIDContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPhoto", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDPhoto() As Integer
		Get
			Return Me._IDPhoto
		End Get
		Set
			If ((Me._IDPhoto = value)  _
						= false) Then
				If Me._Photo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPhotoChanging(value)
				Me.SendPropertyChanging
				Me._IDPhoto = value
				Me.SendPropertyChanged("IDPhoto")
				Me.OnIDPhotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_User", DbType:="VarChar(50)")>  _
	Public Property Create_User() As String
		Get
			Return Me._Create_User
		End Get
		Set
			If (String.Equals(Me._Create_User, value) = false) Then
				Me.OnCreate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Create_User = value
				Me.SendPropertyChanged("Create_User")
				Me.OnCreate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_Date", DbType:="SmallDateTime")>  _
	Public Property Create_Date() As System.Nullable(Of Date)
		Get
			Return Me._Create_Date
		End Get
		Set
			If (Me._Create_Date.Equals(value) = false) Then
				Me.OnCreate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Create_Date = value
				Me.SendPropertyChanged("Create_Date")
				Me.OnCreate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_User", DbType:="VarChar(50)")>  _
	Public Property Update_User() As String
		Get
			Return Me._Update_User
		End Get
		Set
			If (String.Equals(Me._Update_User, value) = false) Then
				Me.OnUpdate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Update_User = value
				Me.SendPropertyChanged("Update_User")
				Me.OnUpdate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_Date", DbType:="SmallDateTime")>  _
	Public Property Update_Date() As System.Nullable(Of Date)
		Get
			Return Me._Update_Date
		End Get
		Set
			If (Me._Update_Date.Equals(value) = false) Then
				Me.OnUpdate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Update_Date = value
				Me.SendPropertyChanged("Update_Date")
				Me.OnUpdate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Photo_ContentPhoto", Storage:="_Photo", ThisKey:="IDPhoto", OtherKey:="IDPhoto", IsForeignKey:=true)>  _
	Public Property Photo() As Photo
		Get
			Return Me._Photo.Entity
		End Get
		Set
			Dim previousValue As Photo = Me._Photo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Photo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Photo.Entity = Nothing
					previousValue.ContentPhotos.Remove(Me)
				End If
				Me._Photo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContentPhotos.Add(Me)
					Me._IDPhoto = value.IDPhoto
				Else
					Me._IDPhoto = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Photo")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Content_ContentPhoto", Storage:="_Content", ThisKey:="IDContent", OtherKey:="IDContent", IsForeignKey:=true)>  _
	Public Property Content() As Content
		Get
			Return Me._Content.Entity
		End Get
		Set
			Dim previousValue As Content = Me._Content.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Content.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Content.Entity = Nothing
					previousValue.ContentPhotos.Remove(Me)
				End If
				Me._Content.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ContentPhotos.Add(Me)
					Me._IDContent = value.IDContent
				Else
					Me._IDContent = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Content")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Content_Category")>  _
Partial Public Class Content_Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDContent As Integer
	
	Private _IDCategory As Integer
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Create_User As String
	
	Private _Create_Date As System.Nullable(Of Date)
	
	Private _Update_User As String
	
	Private _Update_Date As System.Nullable(Of Date)
	
	Private _Category As EntityRef(Of Category)
	
	Private _Content As EntityRef(Of Content)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDContentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDContentChanged()
    End Sub
    Partial Private Sub OnIDCategoryChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCategoryChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCreate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnCreate_UserChanged()
    End Sub
    Partial Private Sub OnCreate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreate_DateChanged()
    End Sub
    Partial Private Sub OnUpdate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnUpdate_UserChanged()
    End Sub
    Partial Private Sub OnUpdate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdate_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Category = CType(Nothing, EntityRef(Of Category))
		Me._Content = CType(Nothing, EntityRef(Of Content))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDContent", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDContent() As Integer
		Get
			Return Me._IDContent
		End Get
		Set
			If ((Me._IDContent = value)  _
						= false) Then
				If Me._Content.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDContentChanging(value)
				Me.SendPropertyChanging
				Me._IDContent = value
				Me.SendPropertyChanged("IDContent")
				Me.OnIDContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCategory", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IDCategory() As Integer
		Get
			Return Me._IDCategory
		End Get
		Set
			If ((Me._IDCategory = value)  _
						= false) Then
				If Me._Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDCategoryChanging(value)
				Me.SendPropertyChanging
				Me._IDCategory = value
				Me.SendPropertyChanged("IDCategory")
				Me.OnIDCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_User", DbType:="VarChar(50)")>  _
	Public Property Create_User() As String
		Get
			Return Me._Create_User
		End Get
		Set
			If (String.Equals(Me._Create_User, value) = false) Then
				Me.OnCreate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Create_User = value
				Me.SendPropertyChanged("Create_User")
				Me.OnCreate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_Date", DbType:="SmallDateTime")>  _
	Public Property Create_Date() As System.Nullable(Of Date)
		Get
			Return Me._Create_Date
		End Get
		Set
			If (Me._Create_Date.Equals(value) = false) Then
				Me.OnCreate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Create_Date = value
				Me.SendPropertyChanged("Create_Date")
				Me.OnCreate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_User", DbType:="VarChar(50)")>  _
	Public Property Update_User() As String
		Get
			Return Me._Update_User
		End Get
		Set
			If (String.Equals(Me._Update_User, value) = false) Then
				Me.OnUpdate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Update_User = value
				Me.SendPropertyChanged("Update_User")
				Me.OnUpdate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_Date", DbType:="SmallDateTime")>  _
	Public Property Update_Date() As System.Nullable(Of Date)
		Get
			Return Me._Update_Date
		End Get
		Set
			If (Me._Update_Date.Equals(value) = false) Then
				Me.OnUpdate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Update_Date = value
				Me.SendPropertyChanged("Update_Date")
				Me.OnUpdate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Content_Category", Storage:="_Category", ThisKey:="IDCategory", OtherKey:="IDCategory", IsForeignKey:=true)>  _
	Public Property Category() As Category
		Get
			Return Me._Category.Entity
		End Get
		Set
			Dim previousValue As Category = Me._Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Category.Entity = Nothing
					previousValue.Content_Categories.Remove(Me)
				End If
				Me._Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Content_Categories.Add(Me)
					Me._IDCategory = value.IDCategory
				Else
					Me._IDCategory = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Category")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Content_Content_Category", Storage:="_Content", ThisKey:="IDContent", OtherKey:="IDContent", IsForeignKey:=true)>  _
	Public Property Content() As Content
		Get
			Return Me._Content.Entity
		End Get
		Set
			Dim previousValue As Content = Me._Content.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Content.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Content.Entity = Nothing
					previousValue.Content_Categories.Remove(Me)
				End If
				Me._Content.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Content_Categories.Add(Me)
					Me._IDContent = value.IDContent
				Else
					Me._IDContent = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Content")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Category")>  _
Partial Public Class Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDCategory As Integer
	
	Private _IDParent As System.Nullable(Of Integer)
	
	Private _pCategoryType As Integer
	
	Private _CatName As String
	
	Private _CatDescription As String
	
	Private _CatURL As String
	
	Private _IsMenu As System.Nullable(Of Boolean)
	
	Private _OrderBy As System.Nullable(Of Integer)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Create_User As String
	
	Private _Create_Date As System.Nullable(Of Date)
	
	Private _Update_User As String
	
	Private _Update_Date As System.Nullable(Of Date)
	
	Private _IDPhoto As System.Nullable(Of Integer)
	
	Private _Content_Categories As EntitySet(Of Content_Category)
	
	Private _Photo As EntityRef(Of Photo)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDCategoryChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDCategoryChanged()
    End Sub
    Partial Private Sub OnIDParentChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDParentChanged()
    End Sub
    Partial Private Sub OnpCategoryTypeChanging(value As Integer)
    End Sub
    Partial Private Sub OnpCategoryTypeChanged()
    End Sub
    Partial Private Sub OnCatNameChanging(value As String)
    End Sub
    Partial Private Sub OnCatNameChanged()
    End Sub
    Partial Private Sub OnCatDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnCatDescriptionChanged()
    End Sub
    Partial Private Sub OnCatURLChanging(value As String)
    End Sub
    Partial Private Sub OnCatURLChanged()
    End Sub
    Partial Private Sub OnIsMenuChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsMenuChanged()
    End Sub
    Partial Private Sub OnOrderByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderByChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCreate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnCreate_UserChanged()
    End Sub
    Partial Private Sub OnCreate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreate_DateChanged()
    End Sub
    Partial Private Sub OnUpdate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnUpdate_UserChanged()
    End Sub
    Partial Private Sub OnUpdate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdate_DateChanged()
    End Sub
    Partial Private Sub OnIDPhotoChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIDPhotoChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Content_Categories = New EntitySet(Of Content_Category)(AddressOf Me.attach_Content_Categories, AddressOf Me.detach_Content_Categories)
		Me._Photo = CType(Nothing, EntityRef(Of Photo))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDCategory", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDCategory() As Integer
		Get
			Return Me._IDCategory
		End Get
		Set
			If ((Me._IDCategory = value)  _
						= false) Then
				Me.OnIDCategoryChanging(value)
				Me.SendPropertyChanging
				Me._IDCategory = value
				Me.SendPropertyChanged("IDCategory")
				Me.OnIDCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDParent", DbType:="Int")>  _
	Public Property IDParent() As System.Nullable(Of Integer)
		Get
			Return Me._IDParent
		End Get
		Set
			If (Me._IDParent.Equals(value) = false) Then
				Me.OnIDParentChanging(value)
				Me.SendPropertyChanging
				Me._IDParent = value
				Me.SendPropertyChanged("IDParent")
				Me.OnIDParentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_pCategoryType", DbType:="Int NOT NULL")>  _
	Public Property pCategoryType() As Integer
		Get
			Return Me._pCategoryType
		End Get
		Set
			If ((Me._pCategoryType = value)  _
						= false) Then
				Me.OnpCategoryTypeChanging(value)
				Me.SendPropertyChanging
				Me._pCategoryType = value
				Me.SendPropertyChanged("pCategoryType")
				Me.OnpCategoryTypeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CatName() As String
		Get
			Return Me._CatName
		End Get
		Set
			If (String.Equals(Me._CatName, value) = false) Then
				Me.OnCatNameChanging(value)
				Me.SendPropertyChanging
				Me._CatName = value
				Me.SendPropertyChanged("CatName")
				Me.OnCatNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatDescription", DbType:="VarChar(2000)")>  _
	Public Property CatDescription() As String
		Get
			Return Me._CatDescription
		End Get
		Set
			If (String.Equals(Me._CatDescription, value) = false) Then
				Me.OnCatDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._CatDescription = value
				Me.SendPropertyChanged("CatDescription")
				Me.OnCatDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CatURL", DbType:="VarChar(240)")>  _
	Public Property CatURL() As String
		Get
			Return Me._CatURL
		End Get
		Set
			If (String.Equals(Me._CatURL, value) = false) Then
				Me.OnCatURLChanging(value)
				Me.SendPropertyChanging
				Me._CatURL = value
				Me.SendPropertyChanged("CatURL")
				Me.OnCatURLChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsMenu", DbType:="Bit")>  _
	Public Property IsMenu() As System.Nullable(Of Boolean)
		Get
			Return Me._IsMenu
		End Get
		Set
			If (Me._IsMenu.Equals(value) = false) Then
				Me.OnIsMenuChanging(value)
				Me.SendPropertyChanging
				Me._IsMenu = value
				Me.SendPropertyChanged("IsMenu")
				Me.OnIsMenuChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderBy", DbType:="Int")>  _
	Public Property OrderBy() As System.Nullable(Of Integer)
		Get
			Return Me._OrderBy
		End Get
		Set
			If (Me._OrderBy.Equals(value) = false) Then
				Me.OnOrderByChanging(value)
				Me.SendPropertyChanging
				Me._OrderBy = value
				Me.SendPropertyChanged("OrderBy")
				Me.OnOrderByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_User", DbType:="VarChar(50)")>  _
	Public Property Create_User() As String
		Get
			Return Me._Create_User
		End Get
		Set
			If (String.Equals(Me._Create_User, value) = false) Then
				Me.OnCreate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Create_User = value
				Me.SendPropertyChanged("Create_User")
				Me.OnCreate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_Date", DbType:="SmallDateTime")>  _
	Public Property Create_Date() As System.Nullable(Of Date)
		Get
			Return Me._Create_Date
		End Get
		Set
			If (Me._Create_Date.Equals(value) = false) Then
				Me.OnCreate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Create_Date = value
				Me.SendPropertyChanged("Create_Date")
				Me.OnCreate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_User", DbType:="VarChar(50)")>  _
	Public Property Update_User() As String
		Get
			Return Me._Update_User
		End Get
		Set
			If (String.Equals(Me._Update_User, value) = false) Then
				Me.OnUpdate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Update_User = value
				Me.SendPropertyChanged("Update_User")
				Me.OnUpdate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_Date", DbType:="SmallDateTime")>  _
	Public Property Update_Date() As System.Nullable(Of Date)
		Get
			Return Me._Update_Date
		End Get
		Set
			If (Me._Update_Date.Equals(value) = false) Then
				Me.OnUpdate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Update_Date = value
				Me.SendPropertyChanged("Update_Date")
				Me.OnUpdate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDPhoto", DbType:="Int")>  _
	Public Property IDPhoto() As System.Nullable(Of Integer)
		Get
			Return Me._IDPhoto
		End Get
		Set
			If (Me._IDPhoto.Equals(value) = false) Then
				If Me._Photo.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIDPhotoChanging(value)
				Me.SendPropertyChanging
				Me._IDPhoto = value
				Me.SendPropertyChanged("IDPhoto")
				Me.OnIDPhotoChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Content_Category", Storage:="_Content_Categories", ThisKey:="IDCategory", OtherKey:="IDCategory")>  _
	Public Property Content_Categories() As EntitySet(Of Content_Category)
		Get
			Return Me._Content_Categories
		End Get
		Set
			Me._Content_Categories.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Photo_Category", Storage:="_Photo", ThisKey:="IDPhoto", OtherKey:="IDPhoto", IsForeignKey:=true)>  _
	Public Property Photo() As Photo
		Get
			Return Me._Photo.Entity
		End Get
		Set
			Dim previousValue As Photo = Me._Photo.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Photo.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Photo.Entity = Nothing
					previousValue.Categories.Remove(Me)
				End If
				Me._Photo.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Categories.Add(Me)
					Me._IDPhoto = value.IDPhoto
				Else
					Me._IDPhoto = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Photo")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Content_Categories(ByVal entity As Content_Category)
		Me.SendPropertyChanging
		entity.Category = Me
	End Sub
	
	Private Sub detach_Content_Categories(ByVal entity As Content_Category)
		Me.SendPropertyChanging
		entity.Category = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Content")>  _
Partial Public Class Content
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IDContent As Integer
	
	Private _PublishDate As System.Nullable(Of Date)
	
	Private _Title As String
	
	Private _HTMLContent As String
	
	Private _Expired_Date As System.Nullable(Of Date)
	
	Private _OrderBy As System.Nullable(Of Integer)
	
	Private _IsPublished As System.Nullable(Of Boolean)
	
	Private _IsDeleted As System.Nullable(Of Boolean)
	
	Private _Create_User As String
	
	Private _Create_Date As System.Nullable(Of Date)
	
	Private _Update_User As String
	
	Private _Update_Date As System.Nullable(Of Date)
	
	Private _ContentPhotos As EntitySet(Of ContentPhoto)
	
	Private _Content_Categories As EntitySet(Of Content_Category)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIDContentChanging(value As Integer)
    End Sub
    Partial Private Sub OnIDContentChanged()
    End Sub
    Partial Private Sub OnPublishDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnPublishDateChanged()
    End Sub
    Partial Private Sub OnTitleChanging(value As String)
    End Sub
    Partial Private Sub OnTitleChanged()
    End Sub
    Partial Private Sub OnHTMLContentChanging(value As String)
    End Sub
    Partial Private Sub OnHTMLContentChanged()
    End Sub
    Partial Private Sub OnExpired_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnExpired_DateChanged()
    End Sub
    Partial Private Sub OnOrderByChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnOrderByChanged()
    End Sub
    Partial Private Sub OnIsPublishedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsPublishedChanged()
    End Sub
    Partial Private Sub OnIsDeletedChanging(value As System.Nullable(Of Boolean))
    End Sub
    Partial Private Sub OnIsDeletedChanged()
    End Sub
    Partial Private Sub OnCreate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnCreate_UserChanged()
    End Sub
    Partial Private Sub OnCreate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCreate_DateChanged()
    End Sub
    Partial Private Sub OnUpdate_UserChanging(value As String)
    End Sub
    Partial Private Sub OnUpdate_UserChanged()
    End Sub
    Partial Private Sub OnUpdate_DateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnUpdate_DateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ContentPhotos = New EntitySet(Of ContentPhoto)(AddressOf Me.attach_ContentPhotos, AddressOf Me.detach_ContentPhotos)
		Me._Content_Categories = New EntitySet(Of Content_Category)(AddressOf Me.attach_Content_Categories, AddressOf Me.detach_Content_Categories)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IDContent", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IDContent() As Integer
		Get
			Return Me._IDContent
		End Get
		Set
			If ((Me._IDContent = value)  _
						= false) Then
				Me.OnIDContentChanging(value)
				Me.SendPropertyChanging
				Me._IDContent = value
				Me.SendPropertyChanged("IDContent")
				Me.OnIDContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PublishDate", DbType:="SmallDateTime")>  _
	Public Property PublishDate() As System.Nullable(Of Date)
		Get
			Return Me._PublishDate
		End Get
		Set
			If (Me._PublishDate.Equals(value) = false) Then
				Me.OnPublishDateChanging(value)
				Me.SendPropertyChanging
				Me._PublishDate = value
				Me.SendPropertyChanged("PublishDate")
				Me.OnPublishDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Title", DbType:="VarChar(500)")>  _
	Public Property Title() As String
		Get
			Return Me._Title
		End Get
		Set
			If (String.Equals(Me._Title, value) = false) Then
				Me.OnTitleChanging(value)
				Me.SendPropertyChanging
				Me._Title = value
				Me.SendPropertyChanged("Title")
				Me.OnTitleChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HTMLContent", DbType:="VarChar(MAX)")>  _
	Public Property HTMLContent() As String
		Get
			Return Me._HTMLContent
		End Get
		Set
			If (String.Equals(Me._HTMLContent, value) = false) Then
				Me.OnHTMLContentChanging(value)
				Me.SendPropertyChanging
				Me._HTMLContent = value
				Me.SendPropertyChanged("HTMLContent")
				Me.OnHTMLContentChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Expired_Date", DbType:="SmallDateTime")>  _
	Public Property Expired_Date() As System.Nullable(Of Date)
		Get
			Return Me._Expired_Date
		End Get
		Set
			If (Me._Expired_Date.Equals(value) = false) Then
				Me.OnExpired_DateChanging(value)
				Me.SendPropertyChanging
				Me._Expired_Date = value
				Me.SendPropertyChanged("Expired_Date")
				Me.OnExpired_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OrderBy", DbType:="Int")>  _
	Public Property OrderBy() As System.Nullable(Of Integer)
		Get
			Return Me._OrderBy
		End Get
		Set
			If (Me._OrderBy.Equals(value) = false) Then
				Me.OnOrderByChanging(value)
				Me.SendPropertyChanging
				Me._OrderBy = value
				Me.SendPropertyChanged("OrderBy")
				Me.OnOrderByChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsPublished", DbType:="Bit")>  _
	Public Property IsPublished() As System.Nullable(Of Boolean)
		Get
			Return Me._IsPublished
		End Get
		Set
			If (Me._IsPublished.Equals(value) = false) Then
				Me.OnIsPublishedChanging(value)
				Me.SendPropertyChanging
				Me._IsPublished = value
				Me.SendPropertyChanged("IsPublished")
				Me.OnIsPublishedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsDeleted", DbType:="Bit")>  _
	Public Property IsDeleted() As System.Nullable(Of Boolean)
		Get
			Return Me._IsDeleted
		End Get
		Set
			If (Me._IsDeleted.Equals(value) = false) Then
				Me.OnIsDeletedChanging(value)
				Me.SendPropertyChanging
				Me._IsDeleted = value
				Me.SendPropertyChanged("IsDeleted")
				Me.OnIsDeletedChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_User", DbType:="VarChar(50)")>  _
	Public Property Create_User() As String
		Get
			Return Me._Create_User
		End Get
		Set
			If (String.Equals(Me._Create_User, value) = false) Then
				Me.OnCreate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Create_User = value
				Me.SendPropertyChanged("Create_User")
				Me.OnCreate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Create_Date", DbType:="SmallDateTime")>  _
	Public Property Create_Date() As System.Nullable(Of Date)
		Get
			Return Me._Create_Date
		End Get
		Set
			If (Me._Create_Date.Equals(value) = false) Then
				Me.OnCreate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Create_Date = value
				Me.SendPropertyChanged("Create_Date")
				Me.OnCreate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_User", DbType:="VarChar(50)")>  _
	Public Property Update_User() As String
		Get
			Return Me._Update_User
		End Get
		Set
			If (String.Equals(Me._Update_User, value) = false) Then
				Me.OnUpdate_UserChanging(value)
				Me.SendPropertyChanging
				Me._Update_User = value
				Me.SendPropertyChanged("Update_User")
				Me.OnUpdate_UserChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Update_Date", DbType:="SmallDateTime")>  _
	Public Property Update_Date() As System.Nullable(Of Date)
		Get
			Return Me._Update_Date
		End Get
		Set
			If (Me._Update_Date.Equals(value) = false) Then
				Me.OnUpdate_DateChanging(value)
				Me.SendPropertyChanging
				Me._Update_Date = value
				Me.SendPropertyChanged("Update_Date")
				Me.OnUpdate_DateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Content_ContentPhoto", Storage:="_ContentPhotos", ThisKey:="IDContent", OtherKey:="IDContent")>  _
	Public Property ContentPhotos() As EntitySet(Of ContentPhoto)
		Get
			Return Me._ContentPhotos
		End Get
		Set
			Me._ContentPhotos.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Content_Content_Category", Storage:="_Content_Categories", ThisKey:="IDContent", OtherKey:="IDContent")>  _
	Public Property Content_Categories() As EntitySet(Of Content_Category)
		Get
			Return Me._Content_Categories
		End Get
		Set
			Me._Content_Categories.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ContentPhotos(ByVal entity As ContentPhoto)
		Me.SendPropertyChanging
		entity.Content = Me
	End Sub
	
	Private Sub detach_ContentPhotos(ByVal entity As ContentPhoto)
		Me.SendPropertyChanging
		entity.Content = Nothing
	End Sub
	
	Private Sub attach_Content_Categories(ByVal entity As Content_Category)
		Me.SendPropertyChanging
		entity.Content = Me
	End Sub
	
	Private Sub detach_Content_Categories(ByVal entity As Content_Category)
		Me.SendPropertyChanging
		entity.Content = Nothing
	End Sub
End Class
